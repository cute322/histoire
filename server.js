const express = require('express');
const http = require('http');
const WebSocket = require('ws');
const fs = require('fs');
const path = require('path');

// 1. ุฅุนุฏุงุฏ ุงูุฎุงุฏู ูุงูุชุทุจููุงุช
const app = express();
const server = http.createServer(app); // ูุณุชุฎุฏู ุฎุงุฏู http ูุฏุนูู ููู WebSocket
const wss = new WebSocket.Server({ server }); // ูุฑุจุท WebSocket ุจููุณ ุงูุฎุงุฏู

const PORT = process.env.PORT || 3000;

// 2. ุฅุนุฏุงุฏุงุช Express (Middleware)
app.use(express.json()); // ููุณูุงุญ ุจูุฑุงุกุฉ ุจูุงูุงุช JSON ูู ุงูุทูุจุงุช
app.use(express.static('public')); // ูุงุณุชุถุงูุฉ ูู ุงููููุงุช ูู ูุฌูุฏ 'public'

// 3. ุฅุฏุงุฑุฉ ุงุชุตุงูุงุช ุตูุญุฉ ุงูุชุญูู (Admin Page)
const adminClients = new Set();

wss.on('connection', (ws) => {
    console.log('ูุฑุงูุจ ุฌุฏูุฏ ุงูุถู (ุตูุญุฉ ุงูุชุญูู).');
    adminClients.add(ws); // ุฅุถุงูุฉ ุงูุงุชุตุงู ุงูุฌุฏูุฏ ุฅูู ูุงุฆูุฉ ุงููุฑุงูุจูู

    ws.on('close', () => {
        console.log('ูุฑุงูุจ ุบุงุฏุฑ.');
        adminClients.delete(ws); // ุฅุฒุงูุฉ ุงูุงุชุตุงู ุนูุฏ ุฅุบูุงู ุงูุตูุญุฉ
    });
});

// 4. ุฏูุงู ูุณุงุนุฏุฉ ููุฑุงุกุฉ ููุชุงุจุฉ ุงููุชุงุฆุฌ ูู ููู JSON
const resultsFilePath = path.join(__dirname, 'results.json');

const readResults = () => {
    if (!fs.existsSync(resultsFilePath)) {
        return [];
    }
    const data = fs.readFileSync(resultsFilePath, 'utf-8');
    // ุงูุชุฃูุฏ ูู ุฃู ุงูููู ููุณ ูุงุฑุบูุง ูุจู ูุญุงููุฉ ุชุญูููู
    return data.length > 0 ? JSON.parse(data) : [];
};

const writeResults = (data) => {
    fs.writeFileSync(resultsFilePath, JSON.stringify(data, null, 2));
};

// 5. ุฏุงูุฉ ูุฅุฑุณุงู ุงูุชุญุฏูุซุงุช ุงูููุฑูุฉ ููู ุงููุฑุงูุจูู
function broadcastNewResult(newResult) {
    for (const client of adminClients) {
        // ุงูุชุฃูุฏ ูู ุฃู ุงูุงุชุตุงู ูุง ูุฒุงู ููุชูุญูุง ูุจู ุงูุฅุฑุณุงู
        if (client.readyState === WebSocket.OPEN) {
            client.send(JSON.stringify(newResult));
        }
    }
}

// ==========================================================
// ==              ููุงุท ุงูููุงูุฉ (API Endpoints)              ==
// ==========================================================

// ูุณุงุฑ ูุงุณุชูุจุงู ูุชุงุฆุฌ ุงููููุฒ ูู ุงููุณุชุฎุฏููู
app.post('/submit-quiz', (req, res) => {
    try {
        const newResult = {
            ...req.body,
            submissionDate: new Date().toLocaleString('ar-DZ', { timeZone: 'Africa/Algiers' })
        };
        const allResults = readResults();
        allResults.push(newResult);
        writeResults(allResults);

        // ุฅุฑุณุงู ุงููุชูุฌุฉ ุงูุฌุฏูุฏุฉ ููุฑุงู ููู ูู ูุฑุงูุจ ุตูุญุฉ ุงูุชุญูู
        broadcastNewResult(newResult);

        res.status(200).json({ message: "ุชู ุชุณุฌูู ูุชูุฌุชู ุจูุฌุงุญ!" });
    } catch (error) {
        console.error("Error in /submit-quiz:", error);
        res.status(500).json({ message: "ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุญูุธ ุงููุชูุฌุฉ." });
    }
});

// ูุณุงุฑ ูุฌูุจ ูู ุงููุชุงุฆุฌ ุงููุณุฌูุฉ (ูุฃูู ุชุญููู ูุตูุญุฉ ุงูุชุญูู)
app.get('/admin-results', (req, res) => {
    res.status(200).json(readResults());
});

// ูุณุงุฑ ูุฌูุจ ุงูุฅุญุตุงุฆูุงุช ุงููุฌูุนุฉ ููุฃุณุฆูุฉ
app.get('/stats', (req, res) => {
    try {
        const allResults = readResults();
        const questionStats = {};

        // ุชุฌููุน ุงูุจูุงูุงุช
        for (const result of allResults) {
            if (!result.answers) continue;
            for (const answer of result.answers) {
                const question = answer.question;
                if (!questionStats[question]) {
                    questionStats[question] = {
                        question: question,
                        correctAnswer: answer.correctAnswer,
                        totalAttempts: 0,
                        correctAttempts: 0,
                        options: {}
                    };
                }
                const stats = questionStats[question];
                stats.totalAttempts++;
                if (answer.isCorrect) {
                    stats.correctAttempts++;
                }
                const selected = answer.selectedAnswer;
                stats.options[selected] = (stats.options[selected] || 0) + 1;
            }
        }

        // ุชุญููู ุงููุงุฆู ุฅูู ูุตูููุฉ ูุฅุฑุณุงููุง
        const statsArray = Object.values(questionStats);
        res.status(200).json(statsArray);
    } catch (error) {
        console.error("Error in /stats:", error);
        res.status(500).json({ message: "ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุญุณุงุจ ุงูุฅุญุตุงุฆูุงุช." });
    }
});


// 6. ุชุดุบูู ุงูุฎุงุฏู
server.listen(PORT, () => {
    console.log(`===================================================`);
    console.log(`  ุงูุฎุงุฏู ูุนูู ุงูุขู ุนูู http://localhost:${PORT}`);
    console.log(`===================================================`);
    console.log(`๐ ุฑุงุจุท ุงููููุฒ ูููุณุชุฎุฏููู: http://localhost:${PORT}`);
    console.log(`๐ ุฑุงุจุท ุณุฌู ุงููุชุงุฆุฌ: http://localhost:${PORT}/admin.html`);
    console.log(`๐ ุฑุงุจุท ุตูุญุฉ ุงูุฅุญุตุงุฆูุงุช: http://localhost:${PORT}/stats.html`);
    console.log(`===================================================`);
});